name: 🚀 Auto Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 가능

jobs:
  deploy:
    name: 📦 Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 📝 Create/Update deploy script on server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            # 프로젝트 디렉토리 생성 (없는 경우)
            mkdir -p /var/www/muksta
            
            # deploy.sh 스크립트 생성/업데이트
            cat > /var/www/muksta/deploy.sh << 'EOSCRIPT'
          #!/bin/bash
          
          # 색상 정의
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          # 로그 함수
          log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
          log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
          log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
          log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
          
          # 배포 시작
          echo "========================================="
          echo "🚀 Muksta Clone Auto Deployment"
          echo "========================================="
          log_info "배포 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          
          # 프로젝트 경로
          PROJECT_DIR="/var/www/muksta"
          cd $PROJECT_DIR
          
          # 1. Git Pull
          log_info "📥 최신 코드 가져오는 중..."
          if git pull origin main; then
              log_success "코드 업데이트 완료"
          else
              log_error "Git pull 실패"
              exit 1
          fi
          
          # 2. Backend 의존성 설치
          log_info "📦 Backend 패키지 설치 중..."
          cd $PROJECT_DIR/backend
          
          # 가상환경 활성화 (있는 경우)
          if [ -f "venv/bin/activate" ]; then
              source venv/bin/activate
          fi
          
          # requirements.txt 설치
          if pip install -r requirements.txt --quiet; then
              log_success "Backend 패키지 설치 완료"
          else
              log_warning "일부 패키지 설치 실패 (계속 진행)"
          fi
          
          # 3. 데이터베이스 마이그레이션
          log_info "🗄️ 데이터베이스 마이그레이션 중..."
          if alembic upgrade head; then
              log_success "데이터베이스 마이그레이션 완료"
          else
              log_warning "마이그레이션 실패 또는 변경사항 없음"
          fi
          
          # 4. Frontend 빌드 (필요한 경우)
          if [ -d "$PROJECT_DIR/frontend" ]; then
              log_info "🏗️ Frontend 빌드 중..."
              cd $PROJECT_DIR/frontend
              
              # node_modules 설치
              if [ ! -d "node_modules" ] || [ "package.json" -nt "node_modules" ]; then
                  log_info "Node 패키지 설치 중..."
                  npm ci --silent
              fi
              
              # 프로덕션 빌드
              if npm run build --silent; then
                  log_success "Frontend 빌드 완료"
              else
                  log_warning "Frontend 빌드 실패 (기존 빌드 사용)"
              fi
          fi
          
          # 5. PM2 프로세스 재시작
          log_info "♻️ 서비스 재시작 중..."
          cd $PROJECT_DIR
          
          # PM2 프로세스 확인 및 재시작
          if pm2 list | grep -q "muksta"; then
              pm2 restart all --update-env
              log_success "PM2 프로세스 재시작 완료"
          else
              # PM2 프로세스가 없으면 시작
              log_info "PM2 프로세스 시작 중..."
              
              # Backend 시작
              cd $PROJECT_DIR/backend
              pm2 start "uvicorn app.main:app --host 0.0.0.0 --port 8000" --name muksta-backend
              
              # Frontend 시작 (개발서버 대신 nginx 사용 권장)
              cd $PROJECT_DIR/frontend
              pm2 start "npm run preview -- --port 3000" --name muksta-frontend
              
              pm2 save
              log_success "PM2 프로세스 시작 완료"
          fi
          
          # 6. 상태 확인
          log_info "📊 서비스 상태 확인 중..."
          pm2 list
          
          # 7. 헬스체크
          sleep 3
          log_info "🏥 헬스체크 수행 중..."
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              log_success "Backend 서비스 정상 작동 중"
          else
              log_error "Backend 서비스 응답 없음"
          fi
          
          # 배포 완료
          echo "========================================="
          log_success "🎉 배포 완료: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "========================================="
          EOSCRIPT
            
            # 실행 권한 부여
            chmod +x /var/www/muksta/deploy.sh
            echo "✅ Deploy script created/updated successfully"
          ENDSSH

      - name: 🚀 Execute deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            cd /var/www/muksta
            ./deploy.sh
          ENDSSH

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

      - name: 📢 Deployment Status
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Server: ${{ secrets.SERVER_HOST }}"
          echo "📅 Time: $(date '+%Y-%m-%d %H:%M:%S')"

      - name: 📢 Deployment Failed
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs for more information."